/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef MODELLOECOMMERCE_H_
#define MODELLOECOMMERCE_H_

#include "..\src\sc_types.h"

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file Header of the state machine 'ModelloEcommerce'.
*/

#ifndef MODELLOECOMMERCE_EVENTQUEUE_BUFFERSIZE
#define MODELLOECOMMERCE_EVENTQUEUE_BUFFERSIZE 20
#endif
#ifndef SC_INVALID_EVENT_VALUE
#define SC_INVALID_EVENT_VALUE 0
#endif
/*! Define number of states in the state enum */

#define MODELLOECOMMERCE_STATE_COUNT 6

/*! Define dimension of the state configuration vector for orthogonal states. */
#define MODELLOECOMMERCE_MAX_ORTHOGONAL_STATES 1


/*! Define indices of states in the StateConfVector */
#define SCVI_MODELLOECOMMERCE_MAIN_REGION_START 0
#define SCVI_MODELLOECOMMERCE_MAIN_REGION_OUT 0
#define SCVI_MODELLOECOMMERCE_MAIN_REGION_ENTER 0
#define SCVI_MODELLOECOMMERCE_MAIN_REGION_CHOOSE_SERVICE 0
#define SCVI_MODELLOECOMMERCE_MAIN_REGION_ADD_PRODUCT 0
#define SCVI_MODELLOECOMMERCE_MAIN_REGION__FINAL_ 0



/*! Enumeration of all states */ 
typedef enum
{
	ModelloEcommerce_last_state,
	ModelloEcommerce_main_region_START,
	ModelloEcommerce_main_region_OUT,
	ModelloEcommerce_main_region_ENTER,
	ModelloEcommerce_main_region_CHOOSE_SERVICE,
	ModelloEcommerce_main_region_ADD_PRODUCT,
	ModelloEcommerce_main_region__final_
} ModelloEcommerceStates;

/*! Type definition of the data structure for the ModelloEcommerceIface interface scope. */
typedef struct
{
	sc_boolean switchOn_raised;
	sc_boolean go_raised;
	sc_boolean add_raised;
	sc_boolean exit1_raised;
	sc_boolean exit2_raised;
	sc_boolean procede_raised;
	sc_boolean decision_raised;
	sc_boolean reset_raised;
	sc_boolean refuse_raised;
	sc_boolean out1_raised;
	sc_boolean recharge_raised;
	sc_integer numProducts;
	sc_integer money;
	sc_integer costo;
} ModelloEcommerceIface;




/*! 
 * Type definition of the data structure for the ModelloEcommerce state machine.
 * This data structure has to be allocated by the client code. 
 */
typedef struct
{
	ModelloEcommerceStates stateConfVector[MODELLOECOMMERCE_MAX_ORTHOGONAL_STATES];
	sc_ushort stateConfVectorPosition; 
	
	ModelloEcommerceIface iface;
} ModelloEcommerce;



/*! Initializes the ModelloEcommerce state machine data structures. Must be called before first usage.*/
extern void modelloEcommerce_init(ModelloEcommerce* handle);

/*! Activates the state machine */
extern void modelloEcommerce_enter(ModelloEcommerce* handle);

/*! Deactivates the state machine */
extern void modelloEcommerce_exit(ModelloEcommerce* handle);

/*! Performs a 'run to completion' step. */
extern void modelloEcommerce_runCycle(ModelloEcommerce* handle);


/*! Raises the in event 'switchOn' that is defined in the default interface scope. */ 
extern void modelloEcommerceIface_raise_switchOn(ModelloEcommerce* handle);

/*! Raises the in event 'go' that is defined in the default interface scope. */ 
extern void modelloEcommerceIface_raise_go(ModelloEcommerce* handle);

/*! Raises the in event 'add' that is defined in the default interface scope. */ 
extern void modelloEcommerceIface_raise_add(ModelloEcommerce* handle);

/*! Raises the in event 'exit1' that is defined in the default interface scope. */ 
extern void modelloEcommerceIface_raise_exit1(ModelloEcommerce* handle);

/*! Raises the in event 'exit2' that is defined in the default interface scope. */ 
extern void modelloEcommerceIface_raise_exit2(ModelloEcommerce* handle);

/*! Raises the in event 'procede' that is defined in the default interface scope. */ 
extern void modelloEcommerceIface_raise_procede(ModelloEcommerce* handle);

/*! Raises the in event 'decision' that is defined in the default interface scope. */ 
extern void modelloEcommerceIface_raise_decision(ModelloEcommerce* handle);

/*! Raises the in event 'reset' that is defined in the default interface scope. */ 
extern void modelloEcommerceIface_raise_reset(ModelloEcommerce* handle);

/*! Raises the in event 'refuse' that is defined in the default interface scope. */ 
extern void modelloEcommerceIface_raise_refuse(ModelloEcommerce* handle);

/*! Raises the in event 'out1' that is defined in the default interface scope. */ 
extern void modelloEcommerceIface_raise_out1(ModelloEcommerce* handle);

/*! Raises the in event 'recharge' that is defined in the default interface scope. */ 
extern void modelloEcommerceIface_raise_recharge(ModelloEcommerce* handle);

/*! Gets the value of the variable 'numProducts' that is defined in the default interface scope. */ 
extern sc_integer modelloEcommerceIface_get_numProducts(const ModelloEcommerce* handle);
/*! Sets the value of the variable 'numProducts' that is defined in the default interface scope. */ 
extern void modelloEcommerceIface_set_numProducts(ModelloEcommerce* handle, sc_integer value);
/*! Gets the value of the variable 'money' that is defined in the default interface scope. */ 
extern sc_integer modelloEcommerceIface_get_money(const ModelloEcommerce* handle);
/*! Sets the value of the variable 'money' that is defined in the default interface scope. */ 
extern void modelloEcommerceIface_set_money(ModelloEcommerce* handle, sc_integer value);
/*! Gets the value of the variable 'costo' that is defined in the default interface scope. */ 
extern sc_integer modelloEcommerceIface_get_costo(const ModelloEcommerce* handle);
/*! Sets the value of the variable 'costo' that is defined in the default interface scope. */ 
extern void modelloEcommerceIface_set_costo(ModelloEcommerce* handle, sc_integer value);

/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean modelloEcommerce_isActive(const ModelloEcommerce* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean modelloEcommerce_isFinal(const ModelloEcommerce* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean modelloEcommerce_isStateActive(const ModelloEcommerce* handle, ModelloEcommerceStates state);


#ifdef __cplusplus
}
#endif 

#endif /* MODELLOECOMMERCE_H_ */

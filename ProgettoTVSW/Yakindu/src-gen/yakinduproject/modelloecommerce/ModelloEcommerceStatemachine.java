/** Generated by YAKINDU Statechart Tools code generator. */
package yakinduproject.modelloecommerce;


public class ModelloEcommerceStatemachine implements IModelloEcommerceStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private boolean switchOn;
		
		
		public void raiseSwitchOn() {
			switchOn = true;
			runCycle();
		}
		
		private boolean go;
		
		
		public void raiseGo() {
			go = true;
			runCycle();
		}
		
		private boolean add;
		
		
		public void raiseAdd() {
			add = true;
			runCycle();
		}
		
		private boolean exit1;
		
		
		public void raiseExit1() {
			exit1 = true;
			runCycle();
		}
		
		private boolean exit2;
		
		
		public void raiseExit2() {
			exit2 = true;
			runCycle();
		}
		
		private boolean procede;
		
		
		public void raiseProcede() {
			procede = true;
			runCycle();
		}
		
		private boolean decision;
		
		
		public void raiseDecision() {
			decision = true;
			runCycle();
		}
		
		private boolean reset;
		
		
		public void raiseReset() {
			reset = true;
			runCycle();
		}
		
		private boolean refuse;
		
		
		public void raiseRefuse() {
			refuse = true;
			runCycle();
		}
		
		private boolean out1;
		
		
		public void raiseOut1() {
			out1 = true;
			runCycle();
		}
		
		private boolean recharge;
		
		
		public void raiseRecharge() {
			recharge = true;
			runCycle();
		}
		
		private long numProducts;
		
		public long getNumProducts() {
			return numProducts;
		}
		
		public void setNumProducts(long value) {
			this.numProducts = value;
		}
		
		private long money;
		
		public long getMoney() {
			return money;
		}
		
		public void setMoney(long value) {
			this.money = value;
		}
		
		private long costo;
		
		public long getCosto() {
			return costo;
		}
		
		public void setCosto(long value) {
			this.costo = value;
		}
		
		protected void clearEvents() {
			switchOn = false;
			go = false;
			add = false;
			exit1 = false;
			exit2 = false;
			procede = false;
			decision = false;
			reset = false;
			refuse = false;
			out1 = false;
			recharge = false;
		}
	}
	
	
	protected SCInterfaceImpl sCInterface;
	
	private boolean initialized = false;
	
	public enum State {
		main_region_START,
		main_region_OUT,
		main_region_ENTER,
		main_region_CHOOSE_SERVICE,
		main_region_ADD_PRODUCT,
		main_region__final_,
		$NullState$
	};
	
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	public ModelloEcommerceStatemachine() {
		sCInterface = new SCInterfaceImpl();
	}
	
	public void init() {
		this.initialized = true;
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		sCInterface.setNumProducts(0);
		
		sCInterface.setMoney(0);
		
		sCInterface.setCosto(5);
	}
	
	public void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		enterSequence_main_region_default();
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		clearOutEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case main_region_START:
				main_region_START_react(true);
				break;
			case main_region_OUT:
				main_region_OUT_react(true);
				break;
			case main_region_ENTER:
				main_region_ENTER_react(true);
				break;
			case main_region_CHOOSE_SERVICE:
				main_region_CHOOSE_SERVICE_react(true);
				break;
			case main_region_ADD_PRODUCT:
				main_region_ADD_PRODUCT_react(true);
				break;
			case main_region__final_:
				main_region__final__react(true);
				break;
			default:
				// $NullState$
			}
		}
		clearEvents();
	}
	public void exit() {
		exitSequence_main_region();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NullState$;
	}
	
	/** 
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return (stateVector[0] == State.main_region__final_);
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case main_region_START:
			return stateVector[0] == State.main_region_START;
		case main_region_OUT:
			return stateVector[0] == State.main_region_OUT;
		case main_region_ENTER:
			return stateVector[0] == State.main_region_ENTER;
		case main_region_CHOOSE_SERVICE:
			return stateVector[0] == State.main_region_CHOOSE_SERVICE;
		case main_region_ADD_PRODUCT:
			return stateVector[0] == State.main_region_ADD_PRODUCT;
		case main_region__final_:
			return stateVector[0] == State.main_region__final_;
		default:
			return false;
		}
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	public void raiseSwitchOn() {
		sCInterface.raiseSwitchOn();
	}
	
	public void raiseGo() {
		sCInterface.raiseGo();
	}
	
	public void raiseAdd() {
		sCInterface.raiseAdd();
	}
	
	public void raiseExit1() {
		sCInterface.raiseExit1();
	}
	
	public void raiseExit2() {
		sCInterface.raiseExit2();
	}
	
	public void raiseProcede() {
		sCInterface.raiseProcede();
	}
	
	public void raiseDecision() {
		sCInterface.raiseDecision();
	}
	
	public void raiseReset() {
		sCInterface.raiseReset();
	}
	
	public void raiseRefuse() {
		sCInterface.raiseRefuse();
	}
	
	public void raiseOut1() {
		sCInterface.raiseOut1();
	}
	
	public void raiseRecharge() {
		sCInterface.raiseRecharge();
	}
	
	public long getNumProducts() {
		return sCInterface.getNumProducts();
	}
	
	public void setNumProducts(long value) {
		sCInterface.setNumProducts(value);
	}
	
	public long getMoney() {
		return sCInterface.getMoney();
	}
	
	public void setMoney(long value) {
		sCInterface.setMoney(value);
	}
	
	public long getCosto() {
		return sCInterface.getCosto();
	}
	
	public void setCosto(long value) {
		sCInterface.setCosto(value);
	}
	
	private boolean check_main_region__choice_0_tr0_tr0() {
		return (sCInterface.getNumProducts()<=3 && sCInterface.getMoney()>0);
	}
	
	private void effect_main_region__choice_0_tr0() {
		enterSequence_main_region_CHOOSE_SERVICE_default();
	}
	
	private void effect_main_region__choice_0_tr1() {
		enterSequence_main_region_OUT_default();
	}
	
	/* Entry action for state 'START'. */
	private void entryAction_main_region_START() {
		sCInterface.setNumProducts(0);
		
		sCInterface.setMoney(16);
	}
	
	/* 'default' enter sequence for state START */
	private void enterSequence_main_region_START_default() {
		entryAction_main_region_START();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_START;
	}
	
	/* 'default' enter sequence for state OUT */
	private void enterSequence_main_region_OUT_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_OUT;
	}
	
	/* 'default' enter sequence for state ENTER */
	private void enterSequence_main_region_ENTER_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_ENTER;
	}
	
	/* 'default' enter sequence for state CHOOSE_SERVICE */
	private void enterSequence_main_region_CHOOSE_SERVICE_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_CHOOSE_SERVICE;
	}
	
	/* 'default' enter sequence for state ADD_PRODUCT */
	private void enterSequence_main_region_ADD_PRODUCT_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_ADD_PRODUCT;
	}
	
	/* Default enter sequence for state null */
	private void enterSequence_main_region__final__default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region__final_;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state START */
	private void exitSequence_main_region_START() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state OUT */
	private void exitSequence_main_region_OUT() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state ENTER */
	private void exitSequence_main_region_ENTER() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state CHOOSE_SERVICE */
	private void exitSequence_main_region_CHOOSE_SERVICE() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state ADD_PRODUCT */
	private void exitSequence_main_region_ADD_PRODUCT() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for final state. */
	private void exitSequence_main_region__final_() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case main_region_START:
			exitSequence_main_region_START();
			break;
		case main_region_OUT:
			exitSequence_main_region_OUT();
			break;
		case main_region_ENTER:
			exitSequence_main_region_ENTER();
			break;
		case main_region_CHOOSE_SERVICE:
			exitSequence_main_region_CHOOSE_SERVICE();
			break;
		case main_region_ADD_PRODUCT:
			exitSequence_main_region_ADD_PRODUCT();
			break;
		case main_region__final_:
			exitSequence_main_region__final_();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region__choice_0() {
		if (check_main_region__choice_0_tr0_tr0()) {
			effect_main_region__choice_0_tr0();
		} else {
			effect_main_region__choice_0_tr1();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_START_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_START_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((sCInterface.switchOn) && ((sCInterface.getNumProducts()==0 && sCInterface.getMoney()==16)))) {
				exitSequence_main_region_START();
				enterSequence_main_region_ENTER_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_OUT_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.out1) {
				exitSequence_main_region_OUT();
				enterSequence_main_region__final__default();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_ENTER_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((sCInterface.go) && ((sCInterface.getNumProducts()<=3 && sCInterface.getMoney()>0)))) {
				exitSequence_main_region_ENTER();
				enterSequence_main_region_CHOOSE_SERVICE_default();
				react();
			} else {
				if (sCInterface.exit1) {
					exitSequence_main_region_ENTER();
					enterSequence_main_region_OUT_default();
					react();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_CHOOSE_SERVICE_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((sCInterface.add) && ((sCInterface.getNumProducts()<=2 && sCInterface.getMoney()>0)))) {
				exitSequence_main_region_CHOOSE_SERVICE();
				sCInterface.getNumProducts()++;
				
				sCInterface.setMoney((sCInterface.money - sCInterface.costo));
				
				enterSequence_main_region_ADD_PRODUCT_default();
				react();
			} else {
				if (sCInterface.reset) {
					exitSequence_main_region_CHOOSE_SERVICE();
					sCInterface.setNumProducts(0);
					
					sCInterface.setMoney(16);
					
					enterSequence_main_region_CHOOSE_SERVICE_default();
					react();
				} else {
					if (sCInterface.exit2) {
						exitSequence_main_region_CHOOSE_SERVICE();
						enterSequence_main_region_OUT_default();
						react();
					} else {
						if (((sCInterface.recharge) && (sCInterface.getMoney()<=50))) {
							exitSequence_main_region_CHOOSE_SERVICE();
							sCInterface.setMoney((sCInterface.money + 10));
							
							enterSequence_main_region_CHOOSE_SERVICE_default();
							react();
						} else {
							did_transition = false;
						}
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_ADD_PRODUCT_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.refuse) {
				exitSequence_main_region_ADD_PRODUCT();
				sCInterface.getNumProducts()--;
				
				sCInterface.setMoney((sCInterface.money - sCInterface.costo));
				
				enterSequence_main_region_CHOOSE_SERVICE_default();
				react();
			} else {
				if (sCInterface.decision) {
					exitSequence_main_region_ADD_PRODUCT();
					react_main_region__choice_0();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region__final__react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
}
